from datetime import datetime, timedelta

from aiogram.types import Message
from aiogram.filters import Command
from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext

from db.psql.models.models import SessionFactory, Event
from core.voice_processor import generate_event_message
from bot.templates.user.menu import schedule_keyboard, platform_button

router = Router()

@router.message(Command("records"))
@router.message(F.text == 'üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏')
async def voice_recording(msg: Message, state: FSMContext):
    await msg.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–∏–æ–¥ üôÇ', reply_markup=schedule_keyboard)


@router.message(lambda message: message.text in ["üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è", "üìÜ –ù–∞ –∑–∞–≤—Ç—Ä–∞", "üóìÔ∏è –ù–∞ –Ω–µ–¥–µ–ª—é", "üìñ –ù–∞ –º–µ—Å—è—Ü"])
async def schedule_handler(message: types.Message):

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    session = SessionFactory()

    text = message.text
    user_id = message.from_user.id

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    if text == "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è":
        date_filter = datetime.today().date()
    elif text == "üìÜ –ù–∞ –∑–∞–≤—Ç—Ä–∞":
        date_filter = (datetime.today() + timedelta(days=1)).date()
    elif text == "üóìÔ∏è –ù–∞ –Ω–µ–¥–µ–ª—é":
        date_filter = None
    elif text == "üìñ –ù–∞ –º–µ—Å—è—Ü":
        date_filter = None

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ –¥–∞—Ç–µ
    if date_filter:
        events = session.query(Event).filter(Event.tg_id == user_id, Event.date == date_filter).all()
    else:
        events = session.query(Event).filter(Event.tg_id == user_id).all()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    if events:
        events_list = [event.__dict__ for event in events]
        event_message = generate_event_message(events_list, message=f"<b><u>–í –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É –≤–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:</u></b>\n\n")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        event_message = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥! üôÖ‚Äç‚ôÇÔ∏è"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await message.reply(event_message,
                         reply_markup=schedule_keyboard,
                         parse_mode='HTML')


@router.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥')
async def voice_recording(msg: Message, state: FSMContext):

    await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üòä', reply_markup=platform_button)