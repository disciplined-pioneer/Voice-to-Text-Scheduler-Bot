import asyncio
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from db.psql.models.crud import UserChecker
from db.psql.models.models import SessionFactory, User, UserAlerts
from bot.templates.user.menu import platform_button
from bot.templates.user.registration_temp import (RegistrationState, new_user_message,
                                                existing_user_message, link_message, instruction_id)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
router = Router()
session = SessionFactory()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def new_user_start(msg: Message, state: FSMContext):
    tg_id = msg.from_user.id
    checker = UserChecker(tg_id)
    
    if checker.user_exists():
        await msg.answer(existing_user_message,
                         reply_markup=platform_button)
    else:
        await msg.answer(new_user_message)
        
        await asyncio.sleep(1.5)
        await msg.bot.send_document(
            chat_id=tg_id,
            document=instruction_id,
            caption=link_message
        )

        await state.set_state(RegistrationState.waiting_for_api_key)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è API –∫–ª—é—á–∞

    checker.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ API –∫–ª—é—á–∞
@router.message(RegistrationState.waiting_for_api_key)
async def process_api_key(msg: Message, state: FSMContext):
    api_key = msg.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á
    await state.update_data(api_key=api_key)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.set_state(RegistrationState.waiting_for_db_id)
    await msg.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@router.message(RegistrationState.waiting_for_db_id)
async def process_db_id(msg: Message, state: FSMContext):
    db_id = msg.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_data = await state.get_data()
    tg_id = msg.from_user.id
    api_key = user_data.get("api_key")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    session.add(User(tg_id=tg_id, api_key=api_key, db_id=db_id))
    session.add(UserAlerts(tg_id=tg_id, alerts=30))
    session.commit()
    session.close()

    await msg.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\nAPI –∫–ª—é—á: {api_key}\nID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_id}",
                     reply_markup=platform_button)
    await state.clear()
