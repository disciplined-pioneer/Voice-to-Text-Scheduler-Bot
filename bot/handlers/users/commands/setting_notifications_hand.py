import re
from aiogram import F, types
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from db.psql.models.models import SessionFactory, UserAlerts
from bot.templates.user.menu import platform_button, alerts_cancellation_button
from bot.templates.user.setting_notifications_temp import notification_text, NotificationState, invalid_time_format_message

router = Router()
session = SessionFactory()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.message(F.text == "üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def notification_processing(msg: Message, state: FSMContext):

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
    await msg.answer(notification_text,
                     reply_markup=alerts_cancellation_button,
                     parse_mode='HTML')
    
    await state.set_state(NotificationState.waiting_for_time)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
@router.message(NotificationState.waiting_for_time)
async def process_time(msg: Message, state: FSMContext):

    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É":
        await cancel_recording(msg, state)
        return

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–µ–ª –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü (–º–∏–Ω—É—Ç –∏ —á–∞—Å–æ–≤)
    user_input = msg.text.strip().lower()
    time_pattern = r'(\d+)\s*(—á–∞—Å|–º–∏–Ω|—á|–º)\s*(\d+)?\s*(–º–∏–Ω|–º)?'
    
    # –°–º–æ—Ç—Ä–∏–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–≤–æ–¥ –ø–æ–¥ –Ω–∞—à –ø–∞—Ç—Ç–µ—Ä–Ω
    match = re.match(time_pattern, user_input)

    if match:
        hours = 0
        minutes = 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Å—ã
        if match.group(2) in ["—á–∞—Å", "—á"]:
            hours = int(match.group(1))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∏–Ω—É—Ç—ã
        if match.group(4) in ["–º–∏–Ω", "–º"]:
            minutes = int(match.group(3) if match.group(3) else 0)
        elif match.group(2) in ["–º–∏–Ω", "–º"]:
            minutes = int(match.group(1))

        # –ò–∑–º–µ–Ω—è–µ–º –∞–ª–µ—Ä—Ç –≤ –ë–î
        tg_id = msg.from_user.id
        total_minutes = (hours * 60) + minutes

        session.merge(UserAlerts(tg_id=tg_id, alerts=total_minutes))
        session.commit()
        session.close()

        await msg.answer(f"‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª {total_minutes} –º–∏–Ω—É—Ç(—ã). –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! üòâ",
                         reply_markup=platform_button)
        await state.clear()
    else:
        await msg.answer(invalid_time_format_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"
@router.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É")
async def cancel_recording(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    # –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏)
    if current_state == NotificationState.waiting_for_time:

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
        if message.reply_to_message:
            await message.reply_to_message.delete()

        # –û—Ç–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ò∫Ô∏è", reply_markup=platform_button)
