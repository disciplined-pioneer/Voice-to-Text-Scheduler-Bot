
import os
import shutil

import soundfile as sf
from aiogram import types

from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from config import API_KEY_LLM
from integrations.llm_text import ChatBot

from bot.templates.user.menu import platform_button, voice_cancellation_button, voice_confirmation_button
from bot.templates.user.voice import VoiceRecordingStates
from bot.templates.user.registration import audio_processing_message
from integrations.audio_chunk_processor import process_audio_in_chunks


def generate_event_message(events):
    message = "üö® <b><u>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:</u></b>\n\n"
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    for idx, event in enumerate(events, 1):
        title = event.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        date = event.get("date", "–ë–µ–∑ –¥–∞—Ç—ã")
        start_time = event.get("start_time", "–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏")
        end_time = event.get("end_time", "–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏")
        description = event.get("description", "–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event_message = f"{idx}Ô∏è‚É£  <b>{title}</b>\n - –î–∞—Ç–∞: {date}\n - –í—Ä–µ–º—è: {start_time if start_time else '–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏'} - {end_time if end_time else '–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏'}\n - –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        message += event_message
    
    return message


class VoiceProcessor:
    
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    def __init__(self, msg: types.Message, state: FSMContext):
        self.msg = msg
        self.state = state
        self.tg_id = msg.from_user.id
        self.file_id = msg.voice.file_id
        self.voice_path = f"data/voices/{self.tg_id}"
        self.chat_path = f"data/chats/{self.tg_id}"

    async def process_voice(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if await self.state.get_state() != VoiceRecordingStates.WAITING_FOR_VOICE:
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        reply_message = await self.msg.reply(audio_processing_message, reply_markup=ReplyKeyboardRemove())

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not await self.download_voice_file():
            await reply_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await self.msg.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.", reply_markup=platform_button)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV
        wav_path = self.convert_ogg_to_wav()
        if not wav_path:
            await reply_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await self.msg.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞.", reply_markup=platform_button)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        full_text = process_audio_in_chunks(wav_path)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Llama
        dict_response_AI, result = self.get_llama_response(full_text)

        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π
        if result:
            await reply_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.msg.reply(generate_event_message(dict_response_AI),
                                reply_markup=voice_confirmation_button,
                                parse_mode='HTML')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await self.state.update_data(events=dict_response_AI)
            
        else:
            await reply_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.msg.reply(dict_response_AI + '\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –µ—â—ë —Ä–∞–∑ üó£',
                                reply_markup=voice_cancellation_button)

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.cleanup_user_data()
        
    async def download_voice_file(self) -> bool:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ."""
        try:
            os.makedirs(self.voice_path, exist_ok=True)
            file = await self.msg.bot.get_file(self.file_id)
            destination = os.path.join(self.voice_path, f"{self.file_id}.ogg")
            await self.msg.bot.download_file(file.file_path, destination)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False

    def convert_ogg_to_wav(self) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç OGG –≤ WAV –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É."""
        try:
            ogg_path = os.path.join(self.voice_path, f"{self.file_id}.ogg")
            data, samplerate = sf.read(ogg_path)
            wav_path = ogg_path.replace(".ogg", ".wav")
            sf.write(wav_path, data, samplerate)
            return wav_path
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return ""

    def get_llama_response(self, text: str) -> str:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É Llama –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
        os.makedirs(self.chat_path, exist_ok=True)
        bot = ChatBot(API_KEY_LLM, f"{self.chat_path}/chat_history_{self.tg_id}.json", r"integrations/promp.txt")
        return bot.run(text)

    def cleanup_user_data(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        shutil.rmtree(self.voice_path, ignore_errors=True)
        shutil.rmtree(self.chat_path, ignore_errors=True)