import os
import json
from typing import List, Union

from langchain_openai import ChatOpenAI
from langchain.memory import ConversationBufferMemory
from langchain.schema import SystemMessage, HumanMessage, AIMessage
from langchain_community.chat_message_histories import ChatMessageHistory


class ChatHistoryManager:

    def __init__(self, file_path: str):
        self.file_path = file_path

    def load(self) -> List[Union[HumanMessage, AIMessage]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.file_path):
            with open(self.file_path, "r", encoding="utf-8") as file:
                try:
                    data = json.load(file)
                    return [HumanMessage(content=m["human"]) if "human" in m 
                           else AIMessage(content=m["ai"]) for m in data]
                except json.JSONDecodeError:
                    return []
        return []

    def save(self, messages: List[Union[HumanMessage, AIMessage]]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª"""
        with open(self.file_path, "w", encoding="utf-8") as file:
            json.dump([{"human": msg.content} if isinstance(msg, HumanMessage) 
                      else {"ai": msg.content} for msg in messages], 
                     file, ensure_ascii=False, indent=2)


class ChatBot:

    def __init__(self, api_key: str, history_file: str, prompt_file: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞"""
        self.history_manager = ChatHistoryManager(history_file)
        self.llm = ChatOpenAI(
            model_name="meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",
            openai_api_key=api_key,
            openai_api_base="https://api.together.xyz/v1"
        )
        self.system_message = self.read_file_txt(prompt_file)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
        self.memory = self._initialize_memory()

    def read_file_txt(self, file_path: str) -> str:
        """–ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, "r", encoding='utf-8') as file:
                content = file.read()
            return content
        except FileNotFoundError:
            return "–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∏–º –±–µ–∑ –Ω–µ–≥–æ."
        
    def _initialize_memory(self) -> ConversationBufferMemory:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞"""
        chat_history = ChatMessageHistory(messages=self.history_manager.load())
        return ConversationBufferMemory(chat_memory=chat_history, return_messages=True)

    def process_input(self, user_input: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
            if not any(isinstance(msg, SystemMessage) for msg in self.memory.chat_memory.messages):
                self.memory.chat_memory.add_message(SystemMessage(content=self.system_message))
            self.memory.chat_memory.add_message(HumanMessage(content=user_input))

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            response = self.llm.invoke(self.memory.chat_memory.messages)
            self.memory.chat_memory.add_message(AIMessage(content=response.content))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.history_manager.save(self.memory.chat_memory.messages)
            return response.content

        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {str(e)}"

    def run(self, user_input: str) -> Union[str, dict]:
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —á–∞—Ç–∞"""
        try:
            response = self.process_input(user_input).replace('*', '')

            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            response = response.replace("\\n", "").replace("\\t", "")  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ —Ç–∞–±—É–ª—è—Ü–∏–∏
            response = response.replace("\'", "\"")  # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            response = response.replace("None", "null")  # –ó–∞–º–µ–Ω—è–µ–º None –Ω–∞ null –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –≤–∞–ª–∏–¥–Ω—ã–π JSON
            try:
                response_json = json.loads(response)
                return response_json
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
                return response

        except KeyboardInterrupt:
            print("\n–í—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –¥–∏–∞–ª–æ–≥ üõë")